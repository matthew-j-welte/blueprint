// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import users "github.com/matthew-j-welte/bit-board/server/models/users"

// UserDB is an autogenerated mock type for the UserDB type
type UserDB struct {
	mock.Mock
}

// CountUsers provides a mock function with given fields:
func (_m *UserDB) CountUsers() (int64, error) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEditorConfiguration provides a mock function with given fields: editorConfig, documentID
func (_m *UserDB) CreateEditorConfiguration(editorConfig users.CodeEditorConfiguration, documentID string) (string, error) {
	ret := _m.Called(editorConfig, documentID)

	var r0 string
	if rf, ok := ret.Get(0).(func(users.CodeEditorConfiguration, string) string); ok {
		r0 = rf(editorConfig, documentID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.CodeEditorConfiguration, string) error); ok {
		r1 = rf(editorConfig, documentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *UserDB) CreateUser(user users.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(users.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEditorConfigurations provides a mock function with given fields: userID
func (_m *UserDB) GetEditorConfigurations(userID string) (interface{}, error) {
	ret := _m.Called(userID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields: user
func (_m *UserDB) GetUserID(user users.User) (string, error) {
	ret := _m.Called(user)

	var r0 string
	if rf, ok := ret.Get(0).(func(users.User) string); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSkills provides a mock function with given fields: userID
func (_m *UserDB) GetUserSkills(userID string) (interface{}, error) {
	ret := _m.Called(userID)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSummary provides a mock function with given fields: userID
func (_m *UserDB) GetUserSummary(userID string) (users.User, error) {
	ret := _m.Called(userID)

	var r0 users.User
	if rf, ok := ret.Get(0).(func(string) users.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
