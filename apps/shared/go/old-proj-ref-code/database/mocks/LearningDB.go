// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import primitive "go.mongodb.org/mongo-driver/bson/primitive"
import resources "github.com/matthew-j-welte/bit-board/server/models/resources"

// LearningDB is an autogenerated mock type for the LearningDB type
type LearningDB struct {
	mock.Mock
}

// AddPostToResource provides a mock function with given fields: post, resourceID
func (_m *LearningDB) AddPostToResource(post resources.ResourcePost, resourceID string) (string, error) {
	ret := _m.Called(post, resourceID)

	var r0 string
	if rf, ok := ret.Get(0).(func(resources.ResourcePost, string) string); ok {
		r0 = rf(post, resourceID)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(resources.ResourcePost, string) error); ok {
		r1 = rf(post, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecrementResourcePostLikeCount provides a mock function with given fields: resourceID, postID
func (_m *LearningDB) DecrementResourcePostLikeCount(resourceID string, postID string) (int, error) {
	ret := _m.Called(resourceID, postID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(resourceID, postID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecrementResourcePostReportCount provides a mock function with given fields: resourceID, postID
func (_m *LearningDB) DecrementResourcePostReportCount(resourceID string, postID string) (int, error) {
	ret := _m.Called(resourceID, postID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(resourceID, postID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *LearningDB) GetAll() ([]primitive.M, error) {
	ret := _m.Called()

	var r0 []primitive.M
	if rf, ok := ret.Get(0).(func() []primitive.M); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]primitive.M)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementResourcePostLikeCount provides a mock function with given fields: resourceID, postID
func (_m *LearningDB) IncrementResourcePostLikeCount(resourceID string, postID string) (int, error) {
	ret := _m.Called(resourceID, postID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(resourceID, postID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementResourcePostReportCount provides a mock function with given fields: resourceID, postID
func (_m *LearningDB) IncrementResourcePostReportCount(resourceID string, postID string) (int, error) {
	ret := _m.Called(resourceID, postID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(resourceID, postID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(resourceID, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementResourceViews provides a mock function with given fields: resourceID
func (_m *LearningDB) IncrementResourceViews(resourceID string) (int, error) {
	ret := _m.Called(resourceID)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(resourceID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
