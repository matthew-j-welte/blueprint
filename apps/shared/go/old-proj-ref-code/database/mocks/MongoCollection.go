// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import database "github.com/matthew-j-welte/bit-board/server/database"
import mock "github.com/stretchr/testify/mock"
import mongo "go.mongodb.org/mongo-driver/mongo"
import options "go.mongodb.org/mongo-driver/mongo/options"

// MongoCollection is an autogenerated mock type for the MongoCollection type
type MongoCollection struct {
	mock.Mock
}

// CountDocuments provides a mock function with given fields: filter, opts
func (_m *MongoCollection) CountDocuments(filter interface{}, opts ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int64
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(filter, opts...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: filter
func (_m *MongoCollection) DeleteOne(filter interface{}) (*mongo.DeleteResult, error) {
	ret := _m.Called(filter)

	var r0 *mongo.DeleteResult
	if rf, ok := ret.Get(0).(func(interface{}) *mongo.DeleteResult); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.DeleteResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: filter, opts
func (_m *MongoCollection) Find(filter interface{}, opts ...*options.FindOptions) (database.ManyResultsHelper, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 database.ManyResultsHelper
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.FindOptions) database.ManyResultsHelper); ok {
		r0 = rf(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.ManyResultsHelper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(filter, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: filter, opts
func (_m *MongoCollection) FindOne(filter interface{}, opts ...*options.FindOneOptions) database.SingleResultHelper {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 database.SingleResultHelper
	if rf, ok := ret.Get(0).(func(interface{}, ...*options.FindOneOptions) database.SingleResultHelper); ok {
		r0 = rf(filter, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SingleResultHelper)
		}
	}

	return r0
}

// FindOneAndUpdate provides a mock function with given fields: filter, update, opts
func (_m *MongoCollection) FindOneAndUpdate(filter interface{}, update interface{}, opts ...*options.FindOneAndUpdateOptions) database.SingleResultHelper {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, filter, update)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 database.SingleResultHelper
	if rf, ok := ret.Get(0).(func(interface{}, interface{}, ...*options.FindOneAndUpdateOptions) database.SingleResultHelper); ok {
		r0 = rf(filter, update, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SingleResultHelper)
		}
	}

	return r0
}

// InsertOne provides a mock function with given fields: _a0
func (_m *MongoCollection) InsertOne(_a0 interface{}) (*mongo.InsertOneResult, error) {
	ret := _m.Called(_a0)

	var r0 *mongo.InsertOneResult
	if rf, ok := ret.Get(0).(func(interface{}) *mongo.InsertOneResult); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.InsertOneResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: filter, projection
func (_m *MongoCollection) UpdateOne(filter interface{}, projection interface{}) (*mongo.UpdateResult, error) {
	ret := _m.Called(filter, projection)

	var r0 *mongo.UpdateResult
	if rf, ok := ret.Get(0).(func(interface{}, interface{}) *mongo.UpdateResult); ok {
		r0 = rf(filter, projection)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}, interface{}) error); ok {
		r1 = rf(filter, projection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
